/* NOTE: DP
*  dp[n] = max(dp[i] + 1), i < n and nums[i] < nums[n]
*/

// Link on LeetCode: https://leetcode.com/problems/longest-increasing-subsequence/description/

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        if (!n) return 0;
        
        int dp[n] = {}, ans = 1;
        fill_n(dp, n, 1);
        for (int i = 1; i < n; i++) {
            for (int j = i - 1; j >= 0; j--) {
                if (nums[j] < nums[i]) dp[i] = max(dp[i], dp[j] + 1);
            }
            ans = max(ans, dp[i]);
        }
        
        return ans;
    }
};
