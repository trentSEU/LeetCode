/* NOTE: DP
*  - initiation:
*    if w1[0] = w2[i] (or w2[0] = w1[i]), the value should be i (insert value until same length)
*    else the value should be previous value + 1 (insert or delete)
*  - if s1[i] = s2[j], dp[i][j] = dp[i - 1][j - 1]
*    else, dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1 // replace, insert, delete
*/

// Link on LeetCode: https://leetcode.com/problems/edit-distance/description/

class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size(), n = word2.size();
        if (!(m * n)) return m + n;
        int dp[m][n];
        dp[0][0] = word1[0] == word2[0] ? 0 : 1;
        for (int i = 1; i < n; i++) dp[0][i] = word1[0] == word2[i] ? i : dp[0][i - 1] + 1;
        for (int i = 1; i < m; i++) dp[i][0] = word2[0] == word1[i] ? i : dp[i - 1][0] + 1;
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (word1[i] == word2[j]) dp[i][j] = dp[i - 1][j - 1];
                else dp[i][j] = min(min(dp[i - 1][j - 1], dp[i - 1][j]), dp[i][j - 1]) + 1;
            }
        }
        return dp[m - 1][n - 1];
    }
};
