NOTE:
-Link on Leetcode discuss: https://leetcode.com/problems/optimal-account-balancing/discuss/95355/11-liner-9ms-DFS-solution-(detailed-explanation)
-This is a NP problem, there is no shortcut, we just backtrack and 
 enumerate all of the possible way to find the way with the least
 transactions.
-[6, -1, -2, -3] -> [6, 5, -2 ,-3] -> [6, 5, 3, -3] -> [6, 5, 3, 0]
                                      [6, 5, -2, 2] -> [6, 5, -2, 0]
                    
                    [6, -1 ,4, -3] -> [6, -1, 3, -3] -> [6, -1, 3, 0]
                                      [6, -1, 4, -4] -> [6, -1, 4, 0]
                    
                    [6, -1, -2, 3] -> [6, -1, -3, 3] -> [6, -1, -3, 0]
                                      [6, -1, -2, 2] -> [6, -1, -2, 0]
                                      
Link on LeetCode: https://leetcode.com/problems/optimal-account-balancing/description/

```
class Solution {
public:
    int minTransfers(vector<vector<int>>& transactions) {
        for (auto t : transactions) {
            book[t[0]] -= t[2];
            book[t[1]] += t[2];
        }
        
        for (auto b : book) 
            if (b.second) debt.push_back(b.second);
        
        if (debt.size() == 0) return 0;
        return DFS(0);
    }
    
private:
    map<int, int> book;
    vector<int> debt;
    
    int DFS(int s) {
        // find the first non-zero one
        while (!debt[s] && s < debt.size()) s++;
        int res = INT_MAX;
        // backtracking and try all the possible way
        for (int i = s + 1, prev = 0; i < debt.size(); i++) {
            if (debt[i] != prev && debt[i] * debt[s] < 0) {
                debt[i] += debt[s];
                res = min(res, 1 + DFS(s + 1));
                prev = debt[i] -= debt[s];
            }
        }
        
        return res < INT_MAX ? res : 0;
    }
};
```
