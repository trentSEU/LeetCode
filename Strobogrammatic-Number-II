NOTE:
- The key idea is that we just construct the first half of the strobogramatic word with ['0', '1', '6', '8', '9'], 
  then we can get the complete word by the fisrt half easily.
- Principles for constructing the first half:
  * '0' can't be the first character.
  * For word with odd number characters, the median character can only be one of ['0', '1', '8'].
  
Link on LeetCode: https://leetcode.com/problems/strobogrammatic-number-ii/description/

class Solution {
public:
    vector<string> findStrobogrammatic(int n) {
        vector<string> res, ini = {"1", "6", "8", "9"};
        bool odd = n % 2 == 1;
        // we already have the ini
        int m = n / 2 - 1;
        if (n == 0) return res;
        if (n == 1) return res = {"0", "1", "8"};
        while (m-- > 0) {
            vector<string> tmp;
            for (int i = 0; i < ini.size(); i++) {
                for (auto d : dict) {
                    tmp.push_back(ini[i] + d);
                }
            }
            ini = tmp;
        }
        
        return Strobo(ini, odd);
    }
    
private:
    vector<char> dict = {'0', '1', '6', '8', '9'};
    
    // construct complete words by the first half
    vector<string> Strobo(vector<string> vec, bool odd) {
        if (odd) {
            vector<string> tmp;
            for (int i = 0; i < vec.size(); i++) {
                tmp.push_back(vec[i] + "0");
                tmp.push_back(vec[i] + "1");
                tmp.push_back(vec[i] + "8");
            }
            vec = tmp;
        }
        
        vector<string> ans;
        for (auto v : vec) {
            for (int i = v.size() - 1; i >= 0; i--) {
                if (odd && i == v.size() - 1) continue;
                if (v[i] == '6') v.push_back('9');
                else if (v[i] == '9') v.push_back('6');
                else v.push_back(v[i]);
            }
            ans.push_back(v);
        }
        
        return ans;
    }
};
