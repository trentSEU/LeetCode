/* NOTE: DP
  - one and two indicate the number of digits of the last number in a decode way.
    - one means last number has 1 digit, two means last number has 2 digits.
  - In each iteration:
    - if current digit and last digit can form a valid index (<= 26), then all last one can transit to two now (by adding 
       current digit to the last number)
    - if current digit and last digit can not form a valid index (<= 26), then two should be 0
    - if current digit > '0', which means it can form a valid single digit number, thus, all one/two digit number ended way can         generate a new way by adding a new number to the end.
    - if current digit = '0' which can not form a valid index (<= 26 and >= 1), then one should be 0.
*/

// Link on LeetCode: https://leetcode.com/problems/decode-ways/description/

class Solution {
public:
    int numDecodings(string s) {
        int n = s.size();
        
        int one = s[0] > '0' ? 1 : 0, two = 0;
        for (int i = 1; i < n; i++) {
            int num = (s[i - 1] - '0') * 10 + s[i] - '0', tmp = two;
            two = num <= 26 ? one : 0;
            one = s[i] > '0' ? one + tmp : 0;
        }
        
        return one + two;
    }
};
