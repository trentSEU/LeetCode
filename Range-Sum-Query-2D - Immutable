/* NOTE: DP
*  - Inspired by Range Sum Query - Immutable.
*  - dp[i][j] indicates the region sum of (0, 0) - (i, j).
*  - sum(i1, j1, i2, j2) = dp[i2][j2] - dp[i2][j1] - dp[i1][j2] + dp[i1][j1].
*/

// Link on LeetCode: https://leetcode.com/problems/range-sum-query-2d-immutable/description/

class NumMatrix {
public:
    NumMatrix(vector<vector<int>> matrix) {
        if (!matrix.size() || !matrix[0].size()) return;
        this -> matrix = matrix;
        this -> dp = matrix;
        
        int m = matrix.size(), n = matrix[0].size();
        for (int j = 0; j < n; j++)
            for (int i = 1; i < m; i++)
                dp[i][j] += dp[i - 1][j];
        for (int i = 0; i < m; i++)
            for (int j = 1; j < n; j++) 
                dp[i][j] += dp[i][j - 1];
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        if (!matrix.size() || !matrix[0].size()) return 0;
        return dp[row2][col2] + (row1 * col1 > 0 ? dp[row1 - 1][col1 - 1] : 0) - (row1 > 0 ? dp[row1 - 1][col2] : 0) - (col1 > 0 ? dp[row2][col1 - 1] : 0);
    }
    
private:
    vector<vector<int>> dp;
    vector<vector<int>> matrix;
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * int param_1 = obj.sumRegion(row1,col1,row2,col2);
 */
