/* NOTE:
*  - Using four stacks, begins and ends for vec2d, cBegin and cEnd for child vector in vec2d.
*  - cBegin.top() = cEnd.top() means it's the end of current child vector, pop up cBegin and cEnd,
*    move begin.top() to next child vector, push new iterators into cBegin and cEnd.
*  - begins.top() = begins.end() means it's the end of vec2d, no next element.
*/

Link on LeetCode: https://leetcode.com/problems/flatten-2d-vector/description/

class Vector2D {
public:
    Vector2D(vector<vector<int>>& vec2d) {
        begins.push(vec2d.begin());
        if (vec2d.size()) cBegin.push(vec2d.begin() -> begin());
        ends.push(vec2d.end());
        if (vec2d.size()) cEnd.push(vec2d.begin() -> end());
    }

    int next() {
        if (hasNext()) return *(cBegin.top()++);
    }

    bool hasNext() {
        while (begins.size()) {
            if (begins.top() == ends.top()) return false;
            if (cBegin.top() == cEnd.top()) {
                cBegin.pop();
                cEnd.pop();
                begins.top()++;
                if (begins.top() == ends.top()) return false;
                cBegin.push(begins.top() -> begin());
                cEnd.push(begins.top() -> end());
            }
            else return true;
        }
    }
    
private:
    stack<vector<vector<int>>::iterator> begins, ends;
    stack<vector<int>::iterator> cBegin, cEnd;
};

/**
 * Your Vector2D object will be instantiated and called as such:
 * Vector2D i(vec2d);
 * while (i.hasNext()) cout << i.next();
 */
