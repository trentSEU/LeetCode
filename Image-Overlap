NOTE:
 - I solve this problem by brute force.
 - The idea is for each position, I move image A in four 
   directions(up, down, left, right), and check the overlap 
   of two images.
 - It should be noted that, in order to ensure the correctness
   of the image movement, image moved left can't be moved right
   anymore, image moved up can't be moved down anymore, vice versa.

class Solution {
public:
    int largestOverlap(vector<vector<int>>& A, vector<vector<int>>& B) {
        visited = vector<vector<bool>>(A.size() * 2, vector<bool>(A[0].size() * 2, false));
        maxOverlap = max(maxOverlap, check(A, B, 0, 0));
        imageMove(A, B, 0, 0);
        return maxOverlap;
    }
    
private:
    int maxOverlap = 0;
    vector<vector<bool>> visited;
    
    int check(const vector<vector<int>>& m1, const vector<vector<int>>& m2, int r, int c) {
        int checkSum = 0;
        for (int i = 0 + max(r, 0); i < m1.size() + min(r, 0); i++) {
            for (int j = 0 + max(c, 0); j < m1[0].size() + min(c, 0); j++)
                checkSum += m1[i][j] & m2[i][j];
        }
        return checkSum;
    }
    
    void imageMove(vector<vector<int>> m1, const vector<vector<int>>& m2, int r, int c) {
        int a = m2.size();
        vector<vector<int>> tmp;
        if (abs(r) == a || abs(c) == a) return;
        if (visited[r + a][c + a]) return;
        visited[r + a][c + a] = true;
        
        // move upward
        if (r <= 0) {
            tmp = m1;
            tmp.erase(tmp.begin());
            tmp.push_back(vector<int>(a, 0));
            maxOverlap = max(maxOverlap, check(tmp, m2, r - 1, c));
            imageMove(tmp, m2, r - 1, c);
        }
        
        // move downward
        if (r >= 0) {
            tmp = m1;
            tmp.pop_back();
            tmp.insert(tmp.begin(), vector<int>(a, 0));
            maxOverlap = max(maxOverlap, check(tmp, m2, r + 1, c));
            imageMove(tmp, m2, r + 1, c);
        }
        
        // move left
        if (c <= 0) {
            tmp = m1;
            for (int i = 0; i < tmp.size(); i++) {
                tmp[i].erase(tmp[i].begin());
                tmp[i].push_back(0);
            }
            maxOverlap = max(maxOverlap, check(tmp, m2, r, c - 1));
            imageMove(tmp, m2, r, c - 1);
        }
        
        // move right
        if (c >= 0) {
            tmp = m1;
            for (int i = 0; i < tmp.size(); i++) {
                tmp[i].pop_back();
                tmp[i].insert(tmp[i].begin(), 0);
            }
            maxOverlap = max(maxOverlap, check(tmp, m2, r, c + 1));
            imageMove(tmp, m2, r, c + 1);
        }
    }
};
