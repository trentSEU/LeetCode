/* NOTE: DP
*  - dp[i][j] indicates the area of a square whose bottom-right vertex located at (i, j).
*  - if dp[i - 1][j - 1] * dp[i - 1][j] * dp[i][j - 1] > 0, then dp[i][j] = min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1])) + 1
*    - dp[i - 1][j - 1] * dp[i - 1][j] * dp[i][j - 1] > 0 ensure that there is at least a 1 * 1 square
*/

// Link on LeetCode: https://leetcode.com/problems/maximal-square/description/

// refer to https://leetcode.com/problems/maximal-square/discuss/153639/Easy-C++-DP-solution

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if (!matrix.size()) return 0;
        int m = matrix.size(), n = matrix[0].size(), ans = 0;
        
        int dp[m][n] = {};
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = matrix[i][j] - '0';
                if (i > 0 && j > 0 && dp[i][j]) {
                    if (dp[i - 1][j - 1] * dp[i - 1][j] * dp[i][j - 1])
                        dp[i][j] = min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1])) + 1;
                }
                ans = max(ans, dp[i][j]);
            }
        }
        
        return ans * ans;
    }
};
