// Link on LeetCode: https://leetcode.com/problems/palindromic-substrings/description/

class Solution {
public:
    int countSubstrings(string s) {
        int n = s.size();
        if (!n) return 0;
        
        int dp[n][n] = {};
        unordered_map<int, set<int>> pal;
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
            pal[i].emplace(i);
        }
        
        for (int k = 1; k < n; k++) {
            for (int i = 0; i < n - 1; i++) {
                int j = i + k;
                if (j >= n) break;
                dp[i][j] = dp[i + 1][j] + dp[i][j - 1];
                // dp[i + 1][j] and dp[i][j - 1] both count dp[i + 1][j - 1]
                if (i + 1 <= j - 1) dp[i][j] -= dp[i + 1][j - 1];
                // plus 1 if s[i : j] is palindromic itself and add it into dictionary
                if (s[i] == s[j] && (pal[i + 1].count(j - 1) || i + 1 == j)) {
                    dp[i][j] += 1;
                    pal[i].emplace(j);
                }
            }
        }
        
        return dp[0][n - 1];
    }
};
