/* NOTE: DP
*  if s3[i + j - 1] = s1[i - 1], dp[i][j] |= dp[i - 1][j]
*  if s3[i + j - 1] = s1[j - 1], dp[i][j] |= dp[i][j - 1]
*/

// refer to https://leetcode.com/problems/interleaving-string/discuss/153352/Easy-C++-DP-solution-with-explanation

// Link on LeetCode: https://leetcode.com/problems/interleaving-string/description/

class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int m = s1.size(), n = s2.size();
        if (m + n != s3.size()) return false;
        if (!m) return s2 == s3;
        if (!n) return s1 == s3;
        
        bool dp[m + 1][n + 1];
        for (int i = 0; i <= m; i++) fill_n(dp[i], n + 1, false);
        dp[0][0] = true;
        
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                if (!(i + j)) continue;
                if (i && s3[i + j - 1] == s1[i - 1]) dp[i][j] |= dp[i - 1][j];
                if (j && s3[i + j - 1] == s2[j - 1]) dp[i][j] |= dp[i][j - 1];
            }
        }
        
        return dp[m][n];
    }
};
