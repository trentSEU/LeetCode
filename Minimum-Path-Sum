/* NOTE: DP
*  if i != 0 && j != 0, dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
*  if i = 0 and j = 0, dp[i][j] = grid[i][j];
*  if i = 0, dp[i][j] = dp[i][j - 1] + grid[i][j];
*  if j = 0, dp[i][j] = dp[i - 1][j] + grid[i][j];
*/

// Link on LeetCode: https://leetcode.com/problems/minimum-path-sum/description/

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if (!grid.size() || !grid[0].size()) return 0;
        int m = grid.size(), n = grid[0].size();
        int dp[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!i && !j) dp[i][j] = grid[i][j];
                else if (!i) dp[i][j] = dp[i][j - 1] + grid[i][j];
                else if (!j) dp[i][j] = dp[i - 1][j] + grid[i][j];
                else dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
            }
        }
        return dp[m - 1][n - 1];
    }
};
