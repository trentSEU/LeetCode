/* NOTE: DP
*  dp[n] = max(dp[n - 2], dp[n - 3]) + nums[n]
*/

// Link on LeetCode: https://leetcode.com/problems/house-robber/description/

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (!n) return 0;
        int dp[n + 3];
        dp[0] = nums[0], dp[1] = nums[1], dp[2] = nums[0] + nums[2];
        for (int i = 3; i < n; i++) dp[i] = max(dp[i - 2], dp[i - 3]) + nums[i];
        if (n < 2) return dp[n - 1];
        return max(dp[n - 1], dp[n - 2]);
    }
};
