/* NOTE: dynamical programming
*  - Using 3 dimensional matrix to record horizontal, vertical, and diagonal consecutive One num
*/

Link on LeetCode: https://leetcode.com/problems/longest-line-of-consecutive-one-in-matrix/description/

class Solution {
public:
    int longestLine(vector<vector<int>>& M) {
        int r = M.size(), c = r ? M[0].size() : 0, ans = INT_MIN;
        if (!r) return 0;
        vector<vector<vector<int>>> dp(r, vector<vector<int>>(c, vector<int>(4, 0))); // [horizontal, vertical, diagonal]
        // initialize first column
        for (int i = 0; i < r; i++) {
            if (!M[i][0]) continue;
            dp[i][0] = {1, 1, 1, 1};
            dp[i][0][1] = !i ? 1 : dp[i - 1][0][1] + 1;
            ans = max(ans, dp[i][0][1]);
        }
        // initialize first row
        for (int j = 0; j < c; j++) {
            if (!M[0][j]) continue;
            dp[0][j] = {1, 1, 1, 1};
            dp[0][j][0] = !j ? 1 : dp[0][j - 1][0] + 1;
            ans = max(ans, dp[0][j][0]);
        }
        // count horizontal, vertical, diagonal
        for (int i = 1; i < r; i++) {
            for (int j = 1; j < c; j++) {
                if (!M[i][j]) continue;
                dp[i][j][0] = dp[i][j - 1][0] + 1;
                dp[i][j][1] = dp[i - 1][j][1] + 1;
                dp[i][j][2] = dp[i - 1][j - 1][2] + 1;
                ans = max(ans, max(dp[i][j][0], max(dp[i][j][1], dp[i][j][2])));
            }
        }
        // count anti-horizontal
        for (int i = 1; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (M[i][j])  {
                    if (j + 1 < c) {
                        dp[i][j][3] = dp[i - 1][j + 1][3] + 1;
                        ans = max(ans, dp[i][j][3]);
                    }
                    else dp[i][j][3] = 1;
                }
            }
        }
        return ans == INT_MIN ? 0 : ans;
    }
};
