/* NOTE:
*  - newFood()
*    change curFood to the new food positon and avoid the new position 
*    is on the body of snake, if the food vector is empty, change the
*    curFood to outside of the matrix.
*  - move
*    if the next step is valid move snake.
*    * if next step is food, the position of food change to new head
*    * if next step is not food, next position change to new head and
*      pop current tail (keep the length same)
*/

// Link on LeetCode: https://leetcode.com/problems/design-snake-game/description/

class SnakeGame {
public:
    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    SnakeGame(int width, int height, vector<pair<int, int>> food) {
        h = height, w = width;
        this -> food = food;
        path.push_back({0, 0});
        dirt["U"] = {-1, 0}, dirt["L"] = {0, -1}, dirt["R"] = {0, 1}, dirt["D"] = {1, 0};
        
        newFood();
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    int move(string direction) {
        int x = path.back()[0], y = path.back()[1];
        x += dirt[direction][0], y += dirt[direction][1];
        vector<int> pos = {x, y}, tail = path.front();
        path.pop_front();
        
        if (path.size() > 1 && pos == path[path.size() - 2]) return path.size() - 1;
        if (x < 0 || x >= h || y < 0 || y >= w || find(path.begin(), path.end(), pos) != path.end()) return -1;
        
        path.push_back(pos);
        if (pos == curFood) path.push_front(tail), newFood();
        return path.size() - 1;
    }
    
private:
    vector<int> curFood = {0, 0};
    deque<vector<int>> path;
    vector<pair<int, int>> food;
    int h, w;
    
    void newFood() {
        if (!food.size()) {
            curFood[0] = -1, curFood[1] = -1;
            return;
        }
        for (int i = 0; i < food.size(); i++) {
            curFood[0] = food[i].first, curFood[1] = food[i].second;
            if (find(path.begin(), path.end(), curFood) == path.end()) {
                food.erase(food.begin() + i);
                break;
            }
        }
    }
    
    map<string, vector<int>> dirt;
};

/**
 * Your SnakeGame object will be instantiated and called as such:
 * SnakeGame obj = new SnakeGame(width, height, food);
 * int param_1 = obj.move(direction);
 */
