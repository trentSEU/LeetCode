/* NOTE: DP
   dp[i] = min(dp[i - 1], dp[i - 2]) + cost[i] // min(one stair, two stairs) + cost[i]
*/

// Link on LeetCode: https://leetcode.com/problems/min-cost-climbing-stairs/description/

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        if (!n) return 0;
        if (n == 1) return cost[0];
        if (n == 2) return cost[1];
        cost.push_back(0); // top
        
        int dp[n + 1] = {}; // n + 1 is top
        dp[0] = cost[0], dp[1] = cost[1];
        
        for (int i = 2; i < n + 1; i++) dp[i] = min(dp[i - 1], dp[i - 2]) + cost[i];
        
        return dp[n];
    }
};
