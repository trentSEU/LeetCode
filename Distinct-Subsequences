/* NOTE: DP
*  - Initialization:
*    if s[0] = t[0], then dp[0][0] = 1, else dp[0][0] = 0.
*    for all dp[i][j]:
*      - if j > i, dp[i][j] = 0. (you can't find t from s if t is longer than s)
*      - if j = 0:
*        - if s[i] = t[j], dp[i][j] = dp[i - 1][j] + 1.
*        - if s[i] != t[j], dp[i][j] = dp[i - 1][j].
*                     
*  - DP formula:
*    dp[i][j] means the number of distinct sub sequences t[0 : j] you can find from s[0 : i].
*    if s[i] = t[j], you can delete or not delete s[i], then dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] (not delete + delete).
*    if s[i] != t[j], you have no choice but to delete s[i], then dp[i][j] = dp[i - 1][j].
*/

// Link on LeetCode: https://leetcode.com/problems/distinct-subsequences/description/

class Solution {
public:
    int numDistinct(string s, string t) {
        int m = s.size(), n = t.size();
        if (!m) return 0;
        int dp[m][n];
        
        if (s[0] == t[0]) dp[0][0] = 1;
        else dp[0][0] = 0;
        for (int i = 1; i < m; i++) {
            if (s[i] == t[0]) dp[i][0] = dp[i - 1][0] + 1;
            else dp[i][0] = dp[i - 1][0];
        }
        
        for (int i = 0; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (j > i) dp[i][j] = 0;
                else if (s[i] == t[j]) dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
                else if (s[i] != t[j]) dp[i][j] = dp[i - 1][j];
            }
        }
        
        return dp[m - 1][n - 1];
    }
};
